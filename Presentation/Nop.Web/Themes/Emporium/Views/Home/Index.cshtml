@using Nop.Core
@using Nop.Services.Configuration
@inject ISettingService settingService
@inject IStoreContext storeContext
@{
    Layout = "_ColumnsOne";

    //page class
    Html.AppendPageCssClassParts("html-home-page");

    var homePageProductsCarouselBreakPoints =
        settingService.GetSettingByKey("EmporiumThemeSettings.ResponsiveBreakpointsForHomePageProducts", "", storeContext.CurrentStore.Id, true);
}

<input id="home-page-carousel-breakpoints" type="hidden" value="@homePageProductsCarouselBreakPoints" />

<div class="page home-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "emporium_home_page_info_boxes" })
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageTop })
        @await Component.InvokeAsync("TopicBlock", new { systemName = "HomepageText" })
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeCategories })
        @await Component.InvokeAsync("HomepageCategories")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeNews })
        @await Component.InvokeAsync("HomepageNews")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforePoll })
        @await Component.InvokeAsync("HomepagePolls")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBottom })
        @await Component.InvokeAsync("Widget", new { widgetZone = "emporium_home_page_sale_of_the_day" })

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeProducts })
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeBestSellers })

        <div class="two-row-carousels small-products">
            @await Component.InvokeAsync("HomepageProducts")
            @await Component.InvokeAsync("HomepageBestSellers")
        </div>
    </div>
</div>
