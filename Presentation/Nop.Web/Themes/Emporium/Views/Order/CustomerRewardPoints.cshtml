@model CustomerRewardPointsModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-reward-points-page");
}

@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.RewardPoints })
}

@section accountPageTitle
{
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.RewardPoints")</h1>
    </div>
}

<div class="page account-page reward-points-page">
    <div class="page-body">
        <div class="reward-points-overview">
            <div class="current-balance">@T("RewardPoints.CurrentBalance", Model.RewardPointsBalance, Model.RewardPointsAmount)</div>
            @if (Model.MinimumRewardPointsBalance > 0)
            {
                <div class="min-balance">@T("RewardPoints.MinimumBalance", Model.MinimumRewardPointsBalance, Model.MinimumRewardPointsAmount)</div>
            }
        </div>
        <div class="section reward-points-history">
            <div class="title">
                <strong>@T("RewardPoints.History")</strong>
            </div>
            @if (Model.RewardPoints.Count > 0)
            {
                <div class="table-wrapper">
                    <table class="data-table">
                        <colgroup>
                            @*<col width="1" />*@
                            <col width="1" />
                            <col width="1" />
                            <col width="1" />
                            <col/>
                        </colgroup>
                        <thead>
                            <tr>
                                @*<th><span class="item-count">#</span></th>*@
                                <th class="date" data-hide="w410, w480">
                                    @T("RewardPoints.Fields.Date")
                                </th>
                                <th class="points">
                                    @T("RewardPoints.Fields.Points")
                                </th>
                                <th class="points-balance">
                                    @T("RewardPoints.Fields.PointsBalance")
                                </th>
                                <th class="message" data-hide="w410, w480">
                                    @T("RewardPoints.Fields.Message")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                        	@for (var i = 0; i < Model.RewardPoints.Count; i++)
                            {
                                var item = Model.RewardPoints[i];
                                <tr @(i % 2 == 0 ? Html.Raw(" class=\"odd\"") : Html.Raw(" class=\"even\""))>
                                   @* <td><span class="item-count">@(i+1)</span></td>*@
                                    <td class="date">
                                        <label class="td-title">@T("RewardPoints.Fields.Date"): </label>
                                        <span>@item.CreatedOn</span>
                                    </td>
                                    <td class="points">
                                        <label class="td-title">@T("RewardPoints.Fields.Points"): </label>
                                        <span>@item.Points</span>
</td>
                                    <td class="points-balance">
                                        <label class="td-title">@T("RewardPoints.Fields.PointsBalance"): </label>
                                        <span>@item.PointsBalance</span>
</td>
                                    <td class="message">
                                        <label class="td-title">@T("RewardPoints.Fields.Message"): </label>
                                        <span>@item.Message</span>
</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                var pager = Html.Pager(Model.PagerModel);
                if (!string.IsNullOrEmpty(pager.ToHtmlString()))
                {
                    <div class="pager">
                        @pager
                    </div>
                }
            }
            else
            {
                <div class="no-data">
                    @T("RewardPoints.NoHistory")
                </div>
            }
        </div>
    </div>
</div>