@model ProductDetailsModel
@using Nop.Core
@using Nop.Core.Domain.Seo;
@using Nop.Core.Domain.Catalog

@inject Nop.Core.IWebHelper webHelper
@inject CatalogSettings catalogSettings
@inject SeoSettings seoSettings
@inject ISettingService settingService
@inject IStoreContext  storeContext
@inject IViewComponentSelector viewComponentSelector

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
    var showShareButton = catalogSettings.ShowShareButton;
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="mobile-name-holder"></div>
                    <div class="mobile-prev-next-holder"></div>
					@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    @{
                        var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom" });
                    }
                    @if (!String.IsNullOrEmpty(cloudZoom.ToHtmlString()))
                    {
                        @cloudZoom
                    }
                    else
                    {
                        <!--product pictures-->
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    }
                    <div class="overview">
                        <div class="prev-next-holder">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        </div>
                        <!--product breadcrumb-->
                        @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1 itemprop="name">
                                @Model.Name
                            </h1>
                            <!--manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        </div>
                        <div class="reviews-and-compare">
                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            <!--compare button-->
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                        </div>
                        <!--compare, email a friend-->
                        @*<div class="overview-buttons">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })

                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                            </div>*@
                        <div class="grouped-product-box">
                            <label>@T("SevenSpikes.Themes.Emporium.Common.GroupedText")</label>
                            <a href="#product-list-start" class="grouped-btn"><span>0</span>@T("SevenSpikes.Themes.Emporium.Common.TypesAvailable")</a>
                        </div>
                        @if (showShareButton)
                        {
                            @await Html.PartialAsync("_ShareButton", Model)
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
					@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>

                 @{
                    var productTabs = await Component.InvokeAsync("Widget", new { widgetZone = "seven_spikes_product_tabs", additionalData = Model });
                    var storeId = storeContext.CurrentStore.Id;

                    var productsTabAreEnabled = !string.IsNullOrEmpty(productTabs.ToHtmlString());

                    var isDescriptionTabEnabled = settingService.GetSettingByKey("tabsettings.enableproductfulldescriptiontab", false, storeId, true);
                    var isSpecificationsTabEnabled = settingService.GetSettingByKey("tabsettings.enableproductspecificationstab", false, storeId, true);

                    var shouldShowDescription = !string.IsNullOrEmpty(Model.FullDescription) && (!productsTabAreEnabled || !isDescriptionTabEnabled);
                    var shouldShowSpecifications = !productsTabAreEnabled || !isSpecificationsTabEnabled;
                }


                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                
                @if (productsTabAreEnabled)
                {
                    @productTabs
                }
               

                @if (shouldShowDescription)
                {
                    <div class="full-description" itemprop="description">
                        @Html.Raw(Model.FullDescription)
                    </div>
                }
                <div class="product-collateral">
                    <!--associated products-->
                    <div id="product-list-start" class="product-variant-list">
                        @foreach (var variant in Model.AssociatedProducts)
                        {
                            <div class="product-variant-line" data-productid="@variant.Id">
                                @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                {
                                    <div class="variant-picture">
                                        @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                                        {
                                            @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[] 
                                            {
                                                ("src", variant.DefaultPictureModel.ImageUrl),
                                                ("alt", variant.DefaultPictureModel.AlternateText),
                                                ("title", variant.DefaultPictureModel.Title),
                                                ("id", "main-product-img-" + variant.Id)
                                            })
                                        }
                                        else
                                        {
                                            <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                             title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                        }
                                    </div>
                                }
                                <div class="variant-overview">
                                    <div class="variant-info">
                                        @if (!string.IsNullOrWhiteSpace(variant.Name))
                                        {
                                            <div class="variant-name">
                                                @variant.Name
                                            </div>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                                        {
                                            <div class="variant-description">
                                                @Html.Raw(variant.ShortDescription)
                                            </div>
                                        }
                                        <!--SKU, MAN, GTIN, vendor-->
                                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                        <div class="attributes-wrapper">
                                            <!--attributes-->
                                            @{
                                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                                @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                            }
                                            <!--gift card-->
                                            @{
                                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                                @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                            }
                                            <!--rental info-->
                                            @{
                                                var dataDictRental = new ViewDataDictionary(ViewData);
                                                dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                                @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                            }
                                            <!--price breaks-->
                                            @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                                        </div>
                                    </div>
                                    <div class="product-variant-box">
                                        <!--availability-->
                                        @await Html.PartialAsync("_Availability", variant)
                                        <!--price & add to cart-->
                                        @{
                                            var dataDictPrice = new ViewDataDictionary(ViewData);
                                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                            @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                        }

                                        <div class="variant-buttons-wrapper">
                                            @{
                                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                            }
                                            <!--wishlist-->
                                            @{
                                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                @await Html.PartialAsync("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                            }
                                        </div>
                                        <!--sample download-->
                                        @await Html.PartialAsync("_DownloadSample", variant)
                                        <!--delivery-->
                                        @await Html.PartialAsync("_DeliveryInfo", variant)
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.AssociatedProducts.Count == 0)
                        {
                            <div class="no-associated-products">
                                @T("Products.NoAssociatedProducts")
                            </div>
                        }
                    </div>
                    
                    @if (shouldShowSpecifications)
                    {
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                    }

                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @*we do not display "also purchased" for grouped products
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })*@
                @{
                    var relatedProducts = await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_related_carosuel" });

                    if (String.IsNullOrEmpty(relatedProducts.ToHtmlString()))
                    {
                        <!-- related products grid -->
                        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    }
                }
                <div class="carousel-wrapper">
                    @if (!String.IsNullOrEmpty(relatedProducts.ToHtmlString()))
                    {
                        @relatedProducts
                    }
                </div>
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
