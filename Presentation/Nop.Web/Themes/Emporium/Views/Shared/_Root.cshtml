@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Services.Security
@using Nop.Services.Orders
@using Nop.Core.Domain.Orders

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject IPermissionService permissionService
@inject ShoppingCartSettings shoppingCartSettings
@{
    Layout = "_Root.Head";

    var storeId = storeContext.CurrentStore.Id;

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);
    var customer = workContext.CurrentCustomer;   
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page">
    @await Component.InvokeAsync("AdminHeaderLinks")
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div class="menu-title">
                <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
            </div>
            <div class="search-wrap">
                <span>@T("Search")</span>
            </div>
            <div class="mobile-logo">
                @await Component.InvokeAsync("Logo")
            </div>
            <div class="shopping-cart-link">               
            </div>
            <div class="personal-button" id="header-links-opener">
                <span>@T("SevenSpikes.Themes.Common.Personal")</span>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("_Header")
    <script type="text/javascript" asp-location="Footer">
        AjaxCart.init(false, '.cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
    </script>
    <div class="overlayOffCanvas"></div>
    @if (isHomePage)
    {
        @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" })
    }
    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync("Footer")
</div>
@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
