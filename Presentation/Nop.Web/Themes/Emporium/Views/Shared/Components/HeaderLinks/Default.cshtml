@model HeaderLinksModel
@using Nop.Core
@using Nop.Services.Configuration

@inject Nop.Core.IWebHelper webHelper
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    int storeId = storeContext.CurrentStore.Id;
    bool compareProductsEnabled = settingService.GetSettingByKey("catalogsettings.compareproductsenabled", true, storeId, true);
    bool shouldShowLoginFormInHeader = settingService.GetSettingByKey("EmporiumThemeSettings.ShowLoginFormInHeader", false, storeId, true);

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    var isLoginPage = controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) &&
                            (actionName.Equals("login", StringComparison.InvariantCultureIgnoreCase) ||
                            actionName.Equals("register", StringComparison.InvariantCultureIgnoreCase));
}
<div class="header-links">
    <ul>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
        @if (Model.IsAuthenticated)
        {
            <li>
                <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account opener">@T("Account.MyAccount")@*@Model.CustomerName*@</a>
                <div class="profile-menu-box">
                    <div class="close-side-menu">
                        <span class="close-side-menu-text">@Model.CustomerName</span>
		                <span class="close-side-menu-btn">@T("SevenSpikes.Themes.Common.CloseMenu")</span>
		            </div>
                    <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a>
                    @if (Model.AllowPrivateMessages)
                    {
                        <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                            <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                            <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                        </a>
                    }
                    <a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a>
                </div>
            </li>
        }
        else
        {
            <li>
                <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account opener"  data-loginUrl="@Url.Action("Login", "Customer")">@T("Account.MyAccount")@*@Model.CustomerName*@</a>
                <div class="profile-menu-box @if (shouldShowLoginFormInHeader && !isLoginPage){<text>login-form-in-header</text>}">
                    <div class="close-side-menu">
                        <span class="close-side-menu-text">@T("Account.MyAccount")</span>
                        <span class="close-side-menu-btn">@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                    </div>
                    <div class="header-form-holder">
                        <a href="@Url.RouteUrl("Register")" class="ico-register">@T("Account.Register")</a>
                        <a href="@Url.RouteUrl("Login")" class="ico-login">@T("Account.Login")</a>
                    </div>
                </div>
            </li>
        }
        @if (compareProductsEnabled)
        {
            <li><a href="@Url.RouteUrl("CompareProducts")" class="ico-compare">@T("Products.Compare.List")</a></li>
        }

        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
    </ul>
    @if (Model.ShoppingCartEnabled)
    {
        <div class="mobile-flyout-wrapper">
            <div class="close-side-menu">
                <span class="close-side-menu-text">@T("SevenSpikes.Themes.Emporium.Common.ShoppingCart")</span>
                <span class="close-side-menu-btn">@T("SevenSpikes.Themes.Emporium.Common.Close")</span>
            </div>
            @await Component.InvokeAsync("FlyoutShoppingCart")
        </div>
    }
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>
