@model PaymentInfoModel
@{
    Layout = "";
}
<div class="wrapper" id="app">
    <div class="card-form">
        <div class="card-list">
            <div class="card-item" v-bind:class="{ '-active' : isCardFlipped }">
                <div class="card-item__side -front">
                    <div class="card-item__focus" v-bind:class="{'-active' : focusElementStyle }" v-bind:style="focusElementStyle" ref="focusElement"></div>
                    <div class="card-item__cover">
                        <img v-bind:src="'/Plugins/Payments.GarantiPos/Content/images/' + currentCardBackground + '.jpeg'" class="card-item__bg">
                    </div>
                    <div class="card-item__wrapper">
                        <div class="card-item__top">
                            <img src="/Plugins/Payments.GarantiPos/Content/images/chip.png" class="card-item__chip">
                            <div class="card-item__type">
                                <transition name="slide-fade-up">
                                    <img v-bind:src="'/Plugins/Payments.GarantiPos/Content/images/' + getCardType + '.png'" v-if="getCardType" v-bind:key="getCardType" alt="" class="card-item__typeImg">
                                </transition>
                            </div>
                        </div>
                        <label for="cardNumber" class="card-item__number" ref="cardNumber">
                            <template v-if="getCardType === 'amex'">
                                <span v-for="(n, $index) in amexCardMask" :key="$index">
                                    <transition name="slide-fade-up">
                                        <div class="card-item__numberItem"
                                             v-if="$index > 4 && $index < 14 && cardNumber.length > $index && n.trim() !== ''">
                                            *
                                        </div>
                                        <div class="card-item__numberItem"
                                             :class="{ '-active' : n.trim() === '' }"
                                             :key="$index" v-else-if="cardNumber.length > $index">
                                            {{cardNumber[$index]}}
                                        </div>
                                        <div class="card-item__numberItem"
                                             :class="{ '-active' : n.trim() === '' }"
                                             v-else
                                             :key="$index + 1">
                                            {{n}}
                                        </div>
                                    </transition>
                                </span>
                            </template>

                            <template v-else>
                                <span v-for="(n, $index) in otherCardMask" :key="$index">
                                    <transition name="slide-fade-up">
                                        <div class="card-item__numberItem"
                                             v-if="$index > 4 && $index < 15 && cardNumber.length > $index && n.trim() !== ''">
                                            *
                                        </div>
                                        <div class="card-item__numberItem"
                                             :class="{ '-active' : n.trim() === '' }"
                                             :key="$index" v-else-if="cardNumber.length > $index">
                                            {{cardNumber[$index]}}
                                        </div>
                                        <div class="card-item__numberItem"
                                             :class="{ '-active' : n.trim() === '' }"
                                             v-else
                                             :key="$index + 1">
                                            {{n}}
                                        </div>
                                    </transition>
                                </span>
                            </template>
                        </label>
                        <div class="card-item__content">
                            <label for="cardName" class="card-item__info" ref="cardName">
                                <div class="card-item__holder">@T("Payment.CardholderName")</div>
                                <transition name="slide-fade-up">
                                    <div class="card-item__name" v-if="cardName.length" key="1">
                                        <transition-group name="slide-fade-right">
                                            <span class="card-item__nameItem" v-for="(n, $index) in cardName.replace(/\s\s+/g, ' ')" v-if="$index === $index" v-bind:key="$index + 1">{{n}}</span>
                                        </transition-group>
                                    </div>
                                    <div class="card-item__name" v-else key="2">@T("Payment.CardholderName")</div>
                                </transition>
                            </label>
                            <div class="card-item__date" ref="cardDate">
                                <label for="cardMonth" class="card-item__dateTitle">@T("Payment.ExpirationDate")</label>
                                <label for="cardMonth" class="card-item__dateItem">
                                    <transition name="slide-fade-up">
                                        <span v-if="cardMonth" v-bind:key="cardMonth">{{cardMonth}}</span>
                                        <span v-else key="2">MM</span>
                                    </transition>
                                </label>
                                /
                                <label for="cardYear" class="card-item__dateItem">
                                    <transition name="slide-fade-up">
                                        <span v-if="cardYear" v-bind:key="cardYear">{{String(cardYear).slice(2,4)}}</span>
                                        <span v-else key="2">YY</span>
                                    </transition>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-item__side -back">
                    <div class="card-item__cover">
                        <img v-bind:src="'/Plugins/Payments.GarantiPos/Content/images/' + currentCardBackground + '.jpeg'" class="card-item__bg">
                    </div>
                    <div class="card-item__band"></div>
                    <div class="card-item__cvv">
                        <div class="card-item__cvvTitle">CVV</div>
                        <div class="card-item__cvvBand">
                            <span v-for="(n, $index) in cardCvv" :key="$index">
                                *
                            </span>

                        </div>
                        <div class="card-item__type">
                            <img v-bind:src="'/Plugins/Payments.GarantiPos/Content/images/' + getCardType + '.png'" v-if="getCardType" class="card-item__typeImg">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-form__inner">
            <div class="card-input">
                <label for="cardNumber" class="card-input__label">@T("Payment.CardNumber")</label>
                <input type="text" id="cardNumber" name="cardNumber" class="card-input__input"
                       v-mask="generateCardNumberMask"
                       v-model="cardNumber"
                       v-on:focus="focusInput"
                       v-on:blur="blurInput"
                       v-on:keyup="keyupInput"
                       v-on:keydown="keydownInput"
                       v-on:change="changeInputNumber"
                       data-ref="cardNumber"
                       autocomplete="off">
            </div>
            <div class="card-input">
                <label for="cardName" class="card-input__label">@T("Payment.CardholderName")</label>
                <input type="text" id="cardName" name="cardName" class="card-input__input" v-model="cardName" v-on:focus="focusInput" v-on:blur="blurInput" data-ref="cardName" autocomplete="off">
            </div>
            <div class="card-form__row">
                <div class="card-form__col">
                    <div class="card-form__group">
                        <label for="cardMonth" class="card-input__label">@T("Plugins.payments.GarantiPos.ExpirationDate")</label>
                        <select class="card-input__input -select" id="cardMonth" name="cardMonth" v-model="cardMonth" v-on:focus="focusInput" v-on:blur="blurInput" data-ref="cardDate">
                            <option value="" disabled selected>@T("Plugins.payments.GarantiPos.Month")</option>
                            <option v-bind:value="n < 10 ? '0' + n : n" v-for="n in 12" v-bind:disabled="n < minCardMonth" v-bind:key="n">
                                {{n < 10 ? '0' + n : n}}
                            </option>
                        </select>
                        <select class="card-input__input -select" id="cardYear" name="cardYear" v-model="cardYear" v-on:focus="focusInput" v-on:blur="blurInput" data-ref="cardDate">
                            <option value="" disabled selected>@T("Plugins.payments.GarantiPos.Year")</option>
                            <option v-bind:value="$index + minCardYear" v-for="(n, $index) in 12" v-bind:key="n">
                                {{$index + minCardYear}}
                            </option>
                        </select>
                    </div>
                </div>
                <div class="card-form__col -cvv">
                    <div class="card-input">
                        <label for="cardCvv" class="card-input__label">@T("Plugins.payments.GarantiPos.Code")</label>
                        <input type="text" class="card-input__input" id="cardCvv" name="cardCvv" v-mask="'####'" maxlength="4" v-model="cardCvv" v-on:focus="flipCard(true)" v-on:blur="flipCard(false)" autocomplete="off">
                    </div>
                </div>
            </div>
        </div>

        <div class="divTable blueTable" id="instalment-table" v-if="installmentItems.length>0">
            <div class="divTableHeading">
                <div class="divTableRow">
                    <div class="divTableHead">@T("Plugins.Payments.GarantiPos.InstallmentNumber")</div>
                    <div class="divTableHead">@T("Plugins.Payments.GarantiPos.Price")</div>
                    <div class="divTableHead">@T("Plugins.Payments.GarantiPos.TotalPrice")</div>
                </div>
            </div>
            <div class="divTableBody" id="table-body">
                <template v-if="installmentItems.length > 0">
                    <div class="divTableRow" v-for="(item,i) in installmentItems" :key="item.i">
                        <div class="divTableCell">
                            <input type="radio"
                                   :checked="i==0"
                                   name="Installments"
                                   class="radio"
                                   v-bind:value="item.TotalAmountValue"
                                   v-on:click="installmentClick"
                                   :data-id="item.Installment" />
                            {{item.Text}}
                        </div>
                        <div class="divTableCell">
                            {{item.Amount}} {{currency}}
                        </div>
                        <div class="divTableCell">
                            {{item.TotalAmount}} {{currency}}
                        </div>
                    </div>
                </template>

            </div>
        </div>

        <div class="divTableFoot" id="table-foot"></div>
    </div>
</div>
<input type="hidden" asp-for="Total" value="@Model.Total" />
<input type="hidden" asp-for="NumberOfInstallment" value="@Model.NumberOfInstallment" />
<input type="hidden" asp-for="CreditCardType" value="@Model.CreditCardType" />
<script>
    new Vue({
        el: "#app",
        data() {
            return {
                currentCardBackground: Math.floor(Math.random() * 25 + 1), // just for fun :D
                cardName: "",
                cardNumber: "",
                cardMonth: "",
                cardYear: "",
                cardCvv: "",
                creditCardType: '@(Model.CreditCardType)',
                minCardYear: new Date().getFullYear(),
                amexCardMask: "#### ###### #####",
                otherCardMask: "#### #### #### ####",
                cardNumberTemp: "",
                isCardFlipped: false,
                focusElementStyle: null,
                isInputFocused: false,
                numberOfInstallment: '@(Model.NumberOfInstallment)',
                binControl: false,
                currency: '@(Model.Currency)',
                installmentItems: [
                    {
                        Amount: '@(Model.Total)',
                        AmountValue: '@(Model.Total)',
                        Installment: 1,
                        Rate: 0,
                        Text: "@T("Plugins.Payments.GarantiPos.InstallmentEmpty")",
                        TotalAmount: '@(Model.Total)',
                        TotalAmountValue: '@(Model.Total)'
                    }]
            };
        },

        mounted() {
            this.cardNumberTemp = this.otherCardMask;
            document.getElementById("cardNumber").focus();

        },
        computed: {
            getCardType() {
                let number = this.cardNumber;
                let re = new RegExp("^4");
                if (number.match(re) != null) return "visa";

                re = new RegExp("^(34|37)");
                if (number.match(re) != null) return "amex";

                re = new RegExp("^5[1-5]");
                if (number.match(re) != null) return "mastercard";

                re = new RegExp("^6011");
                if (number.match(re) != null) return "discover";

                re = new RegExp('^9792');
                if (number.match(re) != null) return 'troy';

                return "visa"; // default type
            },
            generateCardNumberMask() {
                return this.getCardType === "amex" ? this.amexCardMask : this.otherCardMask;
            },
            minCardMonth() {
                if (this.cardYear === this.minCardYear) return new Date().getMonth() + 1;
                return 1;
            }
        },
        watch: {
            cardYear() {
                if (this.cardMonth < this.minCardMonth) {
                    this.cardMonth = "";
                }
            },
            cardNumber() {
                if (!this.binControl) {
                    this.getInstallment();
                }
                if (this.cardNumber < 5) {
                    this.binControl = false;
                }
            }
        },
        methods: {
            flipCard(status) {
                this.isCardFlipped = status;
            },
            focusInput(e) {
                this.isInputFocused = true;
                let targetRef = e.target.dataset.ref;
                let target = this.$refs[targetRef];
                this.focusElementStyle = {
                    width: `${target.offsetWidth}px`,
                    height: `${target.offsetHeight}px`,
                    transform: `translateX(${target.offsetLeft}px) translateY(${target.offsetTop}px)`
                }
            },
            blurInput() {
                let vm = this;
                setTimeout(() => {
                    if (!vm.isInputFocused) {
                        vm.focusElementStyle = null;
                    }
                }, 300);
                vm.isInputFocused = false;
            },
            keyupInput(e) {

                if (e.key === "Backspace") {
                    if (this.cardNumber.length < 6) {
                        this.installmentItems = [
                            {
                               Amount: '@(Model.Total)',
                               AmountValue: '@(Model.Total)',
                               Installment: 1,
                               Rate: 0,
                               Text: "@T("Plugins.Payments.GarantiPos.InstallmentEmpty")",
                               TotalAmount: '@(Model.Total)',
                               TotalAmountValue: '@(Model.Total)'
                            }
                        ];
                        this.binControl = false;
                    }
                }
            },
            keydownInput(e) {
                if (e.key === "Backspace") {
                    if (this.cardNumber.length < 6) {
                        this.installmentItems = [
                            {
                              Amount: '@(Model.Total)',
                              AmountValue: '@(Model.Total)',
                              Installment: 1,
                              Rate: 0,
                              Text: "@T("Plugins.Payments.GarantiPos.InstallmentEmpty")",
                              TotalAmount: '@(Model.Total)',
                              TotalAmountValue: '@(Model.Total)'
                            }
                        ];
                        this.binControl = false;
                    }
                }
            },
            changeInputNumber(e) {

                if (e.type === "change") {
                    var binNumber = this.cardNumber.slice(0, 7).replace(" ", "");
                    if (binNumber > 6) {
                        axios({
                            baseURL: '/Plugins/PaymentGarantiPos/GetInstallment?binNumber=' + binNumber,
                            method: 'get',
                            data: null,
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json',
                                'X-Response-View': 'Json'
                            }
                        }).then(response => {
                            this.creditCardType = response.data.CardFamily;
                            this.installmentItems = response.data.InstallmentItems;

                        }).catch(error => {
                            console.log(error);
                        });
                        this.binControl = true;
                    }
                }
            },
            getInstallment() {
                if (this.cardNumber.length > 6) {
                    var binNumber = this.cardNumber.slice(0, 7).replace(" ", "");
                    console.log(binNumber);
                    axios({
                        baseURL: '/Plugins/PaymentGarantiPos/GetInstallment?binNumber=' + binNumber,
                        method: 'get',
                        data: null,
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'X-Response-View': 'Json'
                        }
                    }).then(response => {
                        this.creditCardType = response.data.CardFamily;
                        this.installmentItems = response.data.InstallmentItems;

                    }).catch(error => {
                        console.log(error);
                    });

                    this.binControl = true;
                }
            },
            installmentClick(e) {
                let installment = e.target.attributes.getNamedItem('data-id').value;
                this.numberOfInstallment = installment;
                console.log(this.numberOfInstallment);
                console.log(installment);
                document.getElementById("NumberOfInstallment").value = installment;
            }

        }
    });

</script>